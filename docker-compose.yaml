# Compose para auth-service-server + Postgres + Mongo
# - Las llaves JWT se inyectan como Docker secrets (montadas en /run/secrets/*).
# - El contenedor usa distroless:nonroot (uid/gid 65532), por eso ponemos 'mode: 0444' en los secrets,
#   garantizando lectura por "otros" (evita 'permission denied' sin tocar permisos del host).

services:
  auth-service-server:
    container_name: auth-service-server

    build:
      context: .
      dockerfile: Dockerfile

    # Carga variables base desde .env (puerto, JWKS, etc.)
    env_file:
      - .env

    # Overrides para correr dentro de Docker (usar nombres de servicio en lugar de "localhost")
    environment:
      # PostgreSQL en la red de Docker
      DB_HOST: ${DB_HOST:-postgres}
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-admin}
      DB_NAME: ${DB_NAME:-localhost}
      DB_SSLMODE: ${DB_SSLMODE:-disable}

      # MongoDB en la red de Docker (authSource=admin porque el root se crea en DB "admin")
      MONGO_URI: ${MONGO_URI}
      MONGO_DB_NAME: ${MONGO_DB_NAME}

      # Puerto interno de la app
      SERVER_PORT: ${SERVER_PORT:-9190}

      # üëâ Rutas a las llaves (montadas como secrets en /run/secrets/*)
      JWT_PRIVATE_KEY_PATH: /run/secrets/jwt_private_key
      JWT_PUBLIC_KEY_PATH: /run/secrets/jwt_public_key

    ports:
      - "9190:9190"

    #  NO montamos ./keys como volumen cuando usamos secrets.
    # volumes:
    #   - ./keys:/app/keys:ro

    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy

    restart: unless-stopped
    networks:
      - backend

    # Montaje de secrets.
    user: "0:0" # ‚Üê root en dev
    secrets:
      - source: jwt_private_key
        target: jwt_private_key
      - source: jwt_public_key
        target: jwt_public_key

  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DB_USER} -d ${DB_NAME} -h postgres -p ${DB_PORT:-5432}",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    networks:
      - backend

  mongo:
    image: mongo:7
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME}
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test:
        [
          "CMD",
          "mongosh",
          "--username",
          "admin",
          "--password",
          "password",
          "--eval",
          "db.adminCommand('ping')",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  postgres_data:
  mongo_data:

# Definici√≥n de secrets
# - Estos archivos DEBEN existir en el host (fuera del build context).
# - .dockerignore puede ignorar 'keys/' para la build; no afecta a secrets (Compose los lee del host).
secrets:
  jwt_private_key:
    file: ./keys/jwtRS256.key
  jwt_public_key:
    file: ./keys/jwtRS256.key.pub
