syntax = "proto3";

package password_history;

option go_package = "server/pb/password_history;password_historypb";

import "google/protobuf/timestamp.proto";

// PasswordHistory model
message PasswordHistory {
  string id = 1;
  string user_id = 2;
  string previous_password_hash = 3;
  google.protobuf.Timestamp changed_at = 4;
  string changed_by = 5;
  bool is_deleted = 6;
  google.protobuf.Timestamp deleted_at = 7;
  string deleted_by = 8;
}

// Request messages
message CreatePasswordHistoryRequest {
  string user_id = 1;
  string previous_password_hash = 2;
  string changed_by = 3;
}

message GetPasswordHistoryRequest {
  string id = 1;
}

message GetPasswordHistoryByUserRequest {
  string user_id = 1;
  int32 limit = 2; // Limitar cantidad de registros históricos
  bool include_deleted = 3;
}

message ValidatePasswordReuseRequest {
  string user_id = 1;
  string password_hash = 2;
  int32 check_last_n_passwords = 3; // Verificar últimas N contraseñas
}

message DeletePasswordHistoryRequest {
  string id = 1;
  string deleted_by = 2;
}

message ListPasswordHistoriesRequest {
  int32 page = 1;
  int32 page_size = 2;
  string user_id = 3;
  google.protobuf.Timestamp date_from = 4;
  google.protobuf.Timestamp date_to = 5;
  bool include_deleted = 6;
}

message CleanupOldPasswordHistoryRequest {
  string user_id = 1;
  int32 keep_last_n_passwords = 2; // Mantener solo las últimas N contraseñas
  string deleted_by = 3;
}

// Response messages
message CreatePasswordHistoryResponse {
  PasswordHistory password_history = 1;
  string message = 2;
}

message GetPasswordHistoryResponse {
  PasswordHistory password_history = 1;
}

message GetPasswordHistoryByUserResponse {
  repeated PasswordHistory password_histories = 1;
  int32 total = 2;
}

message ValidatePasswordReuseResponse {
  bool is_reused = 1;
  string message = 2;
  google.protobuf.Timestamp last_used_at = 3; // Cuándo fue usada por última vez
}

message DeletePasswordHistoryResponse {
  string message = 1;
}

message ListPasswordHistoriesResponse {
  repeated PasswordHistory password_histories = 1;
  int32 total = 2;
  int32 page = 3;
  int32 page_size = 4;
}

message CleanupOldPasswordHistoryResponse {
  int32 deleted_count = 1;
  string message = 2;
}

// PasswordHistory service
service PasswordHistoryService {
  rpc CreatePasswordHistory(CreatePasswordHistoryRequest) returns (CreatePasswordHistoryResponse);
  rpc GetPasswordHistory(GetPasswordHistoryRequest) returns (GetPasswordHistoryResponse);
  rpc GetPasswordHistoryByUser(GetPasswordHistoryByUserRequest) returns (GetPasswordHistoryByUserResponse);
  rpc ValidatePasswordReuse(ValidatePasswordReuseRequest) returns (ValidatePasswordReuseResponse);
  rpc DeletePasswordHistory(DeletePasswordHistoryRequest) returns (DeletePasswordHistoryResponse);
  rpc ListPasswordHistories(ListPasswordHistoriesRequest) returns (ListPasswordHistoriesResponse);
  rpc CleanupOldPasswordHistory(CleanupOldPasswordHistoryRequest) returns (CleanupOldPasswordHistoryResponse);
}
