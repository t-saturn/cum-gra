syntax = "proto3";

package password_reset;

option go_package = "server/pb/password_reset;password_resetpb";

import "google/protobuf/timestamp.proto";

// PasswordReset model
message PasswordReset {
  string id = 1;
  string user_id = 2;
  string token = 3;
  google.protobuf.Timestamp expires_at = 4;
  google.protobuf.Timestamp used_at = 5;
  string ip_address = 6;
  string user_agent = 7;
  google.protobuf.Timestamp created_at = 8;
  bool is_deleted = 9;
  google.protobuf.Timestamp deleted_at = 10;
  string deleted_by = 11;
}

// PasswordReset status enum
enum PasswordResetStatus {
  PASSWORD_RESET_STATUS_UNSPECIFIED = 0;
  PASSWORD_RESET_STATUS_PENDING = 1;
  PASSWORD_RESET_STATUS_USED = 2;
  PASSWORD_RESET_STATUS_EXPIRED = 3;
  PASSWORD_RESET_STATUS_REVOKED = 4;
}

// Request messages
message CreatePasswordResetRequest {
  string user_id = 1;
  string ip_address = 2;
  string user_agent = 3;
  int32 expires_in_minutes = 4; // Duración del token en minutos (ej: 30, 60)
}

message GetPasswordResetRequest {
  string id = 1;
}

message GetPasswordResetByTokenRequest {
  string token = 1;
}

message ValidatePasswordResetTokenRequest {
  string token = 1;
  string ip_address = 2;
  string user_agent = 3;
}

message UsePasswordResetTokenRequest {
  string token = 1;
  string new_password_hash = 2;
  string ip_address = 3;
  string user_agent = 4;
}

message RevokePasswordResetRequest {
  string id = 1;
  string revoked_by = 2;
}

message RevokeAllUserPasswordResetsRequest {
  string user_id = 1;
  string revoked_by = 2;
}

message ListPasswordResetsRequest {
  int32 page = 1;
  int32 page_size = 2;
  string user_id = 3;
  PasswordResetStatus status = 4;
  google.protobuf.Timestamp date_from = 5;
  google.protobuf.Timestamp date_to = 6;
  bool include_deleted = 7;
}

message GetPasswordResetsByUserRequest {
  string user_id = 1;
  PasswordResetStatus status = 2;
  int32 limit = 3;
}

message CleanupExpiredPasswordResetsRequest {
  string deleted_by = 1;
}

message CheckPasswordResetAttemptRateRequest {
  string user_id = 1;
  string ip_address = 2;
  int32 max_attempts_per_hour = 3;
}

// Response messages
message CreatePasswordResetResponse {
  PasswordReset password_reset = 1;
  string message = 2;
}

message GetPasswordResetResponse {
  PasswordReset password_reset = 1;
}

message ValidatePasswordResetTokenResponse {
  bool is_valid = 1;
  string message = 2;
  PasswordResetStatus status = 3;
  google.protobuf.Timestamp expires_at = 4;
}

message UsePasswordResetTokenResponse {
  bool success = 1;
  string message = 2;
}

message RevokePasswordResetResponse {
  string message = 1;
}

message RevokeAllUserPasswordResetsResponse {
  int32 revoked_count = 1;
  string message = 2;
}

message ListPasswordResetsResponse {
  repeated PasswordReset password_resets = 1;
  int32 total = 2;
  int32 page = 3;
  int32 page_size = 4;
}

message GetPasswordResetsByUserResponse {
  repeated PasswordReset password_resets = 1;
  int32 total = 2;
}

message CleanupExpiredPasswordResetsResponse {
  int32 deleted_count = 1;
  string message = 2;
}

message CheckPasswordResetAttemptRateResponse {
  bool is_allowed = 1;
  int32 current_attempts = 2;
  int32 max_attempts = 3;
  google.protobuf.Timestamp reset_time = 4; // Cuándo se resetea el contador
  string message = 5;
}

// PasswordResets service
service PasswordResetsService {
  rpc CreatePasswordReset(CreatePasswordResetRequest) returns (CreatePasswordResetResponse);
  rpc GetPasswordReset(GetPasswordResetRequest) returns (GetPasswordResetResponse);
  rpc GetPasswordResetByToken(GetPasswordResetByTokenRequest) returns (GetPasswordResetResponse);
  rpc ValidatePasswordResetToken(ValidatePasswordResetTokenRequest) returns (ValidatePasswordResetTokenResponse);
  rpc UsePasswordResetToken(UsePasswordResetTokenRequest) returns (UsePasswordResetTokenResponse);
  rpc RevokePasswordReset(RevokePasswordResetRequest) returns (RevokePasswordResetResponse);
  rpc RevokeAllUserPasswordResets(RevokeAllUserPasswordResetsRequest) returns (RevokeAllUserPasswordResetsResponse);
  rpc ListPasswordResets(ListPasswordResetsRequest) returns (ListPasswordResetsResponse);
  rpc GetPasswordResetsByUser(GetPasswordResetsByUserRequest) returns (GetPasswordResetsByUserResponse);
  rpc CleanupExpiredPasswordResets(CleanupExpiredPasswordResetsRequest) returns (CleanupExpiredPasswordResetsResponse);
  rpc CheckPasswordResetAttemptRate(CheckPasswordResetAttemptRateRequest) returns (CheckPasswordResetAttemptRateResponse);
}
