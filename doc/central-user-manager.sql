CREATE TABLE "organic_units" (
  "unit_id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar(255) NOT NULL,
  "acronym" varchar(20) NOT NULL,
  "brand" text,
  "parent_id" bigint,
  "level" int NOT NULL DEFAULT 1,
  "description" text,
  "active" tinyint NOT NULL DEFAULT 1,
  "sort_order" int DEFAULT 0,
  "deleted_at" timestamp,
  "is_deleted" boolean NOT NULL DEFAULT false,
  "version" int NOT NULL DEFAULT 1,
  "created_at" timestamp DEFAULT (now()),
  "updated_at" timestamp DEFAULT (now()),
  "created_by" bigint,
  "updated_by" bigint,
  "deleted_by" bigint
);

CREATE TABLE "organic_units_history" (
  "history_id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "unit_id" bigint,
  "name" varchar(255) NOT NULL,
  "acronym" varchar(20) NOT NULL,
  "brand" text,
  "parent_id" bigint,
  "level" int NOT NULL,
  "description" text,
  "active" tinyint NOT NULL,
  "sort_order" int,
  "version" int NOT NULL,
  "change_type" varchar(20) NOT NULL,
  "changed_fields" json,
  "old_values" json,
  "new_values" json,
  "created_at" timestamp DEFAULT (now()),
  "created_by" bigint
);

CREATE TABLE "users" (
  "user_id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "email" varchar(255) NOT NULL,
  "password_hash" varchar(255) NOT NULL,
  "full_name" varchar(255) NOT NULL,
  "phone" varchar(20),
  "address" text,
  "profile_picture" varchar(500),
  "organic_unit_id" bigint,
  "status" smallint NOT NULL DEFAULT 1,
  "deleted_at" timestamp,
  "is_deleted" boolean NOT NULL DEFAULT false,
  "version" int NOT NULL DEFAULT 1,
  "created_at" timestamp DEFAULT (now()),
  "updated_at" timestamp DEFAULT (now()),
  "created_by" bigint,
  "updated_by" bigint,
  "deleted_by" bigint
);

CREATE TABLE "users_history" (
  "history_id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" bigint,
  "email" varchar(255) NOT NULL,
  "full_name" varchar(255) NOT NULL,
  "phone" varchar(20),
  "address" text,
  "profile_picture" varchar(500),
  "organic_unit_id" bigint,
  "status" smallint NOT NULL,
  "version" int NOT NULL,
  "change_type" varchar(20) NOT NULL,
  "changed_fields" json,
  "old_values" json,
  "new_values" json,
  "created_at" timestamp DEFAULT (now()),
  "created_by" bigint
);

CREATE TABLE "password_history" (
  "history_id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" bigint,
  "previous_password_hash" varchar(255) NOT NULL,
  "changed_at" timestamp DEFAULT (now()),
  "is_deleted" boolean NOT NULL DEFAULT false,
  "deleted_at" timestamp,
  "deleted_by" bigint
);

CREATE TABLE "active_sessions" (
  "session_id" varchar(36) PRIMARY KEY,
  "user_id" bigint,
  "session_token" varchar(500) NOT NULL,
  "started_at" timestamp DEFAULT (now()),
  "last_accessed_at" timestamp DEFAULT (now()),
  "expires_at" timestamp NOT NULL,
  "ip_address" varchar(45),
  "user_agent" text,
  "session_status" smallint DEFAULT 1,
  "is_deleted" boolean NOT NULL DEFAULT false,
  "deleted_at" timestamp
);

CREATE TABLE "session_history" (
  "session_history_id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "session_id" varchar(36),
  "closed_at" timestamp DEFAULT (now()),
  "close_reason" varchar(255),
  "is_deleted" boolean NOT NULL DEFAULT false,
  "deleted_at" timestamp,
  "deleted_by" bigint
);

CREATE TABLE "systems" (
  "system_id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "system_name" varchar(100) NOT NULL,
  "description" text,
  "system_code" varchar(20),
  "status" smallint DEFAULT 1,
  "configuration_json" json,
  "deleted_at" timestamp,
  "is_deleted" boolean NOT NULL DEFAULT false,
  "version" int NOT NULL DEFAULT 1,
  "created_at" timestamp DEFAULT (now()),
  "updated_at" timestamp DEFAULT (now()),
  "created_by" bigint,
  "updated_by" bigint,
  "deleted_by" bigint
);

CREATE TABLE "systems_history" (
  "history_id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "system_id" bigint,
  "system_name" varchar(100) NOT NULL,
  "description" text,
  "system_code" varchar(20),
  "status" smallint,
  "configuration_json" json,
  "version" int NOT NULL,
  "change_type" varchar(20) NOT NULL,
  "changed_fields" json,
  "old_values" json,
  "new_values" json,
  "created_at" timestamp DEFAULT (now()),
  "created_by" bigint
);

CREATE TABLE "roles" (
  "role_id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "system_id" bigint,
  "role_name" varchar(100) NOT NULL,
  "role_description" text,
  "role_status" smallint DEFAULT 1,
  "priority_level" int DEFAULT 0,
  "deleted_at" timestamp,
  "is_deleted" boolean NOT NULL DEFAULT false,
  "version" int NOT NULL DEFAULT 1,
  "created_at" timestamp DEFAULT (now()),
  "updated_at" timestamp DEFAULT (now()),
  "created_by" bigint,
  "updated_by" bigint,
  "deleted_by" bigint
);

CREATE TABLE "permissions" (
  "permission_id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "system_id" bigint,
  "permission_name" varchar(100) NOT NULL,
  "permission_description" text,
  "permission_category" varchar(50),
  "action_type" varchar(20),
  "permission_status" smallint DEFAULT 1,
  "deleted_at" timestamp,
  "is_deleted" boolean NOT NULL DEFAULT false,
  "version" int NOT NULL DEFAULT 1,
  "created_at" timestamp DEFAULT (now()),
  "updated_at" timestamp DEFAULT (now()),
  "created_by" bigint,
  "updated_by" bigint,
  "deleted_by" bigint
);

CREATE TABLE "role_permissions" (
  "role_permission_id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "role_id" bigint,
  "permission_id" bigint,
  "assigned_at" timestamp DEFAULT (now()),
  "assigned_by" bigint,
  "is_deleted" boolean NOT NULL DEFAULT false,
  "deleted_at" timestamp,
  "deleted_by" bigint
);

CREATE TABLE "user_roles" (
  "user_role_id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" bigint,
  "role_id" bigint,
  "system_id" bigint,
  "assigned_at" timestamp DEFAULT (now()),
  "assigned_by" bigint,
  "assignment_status" smallint DEFAULT 1,
  "is_deleted" boolean NOT NULL DEFAULT false,
  "deleted_at" timestamp,
  "deleted_by" bigint
);

CREATE TABLE "structural_positions" (
  "position_id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "organic_unit_id" bigint,
  "position_name" varchar(255) NOT NULL,
  "position_code" varchar(20),
  "description" text,
  "level" int,
  "is_head_position" boolean DEFAULT false,
  "active" tinyint NOT NULL DEFAULT 1,
  "deleted_at" timestamp,
  "is_deleted" boolean NOT NULL DEFAULT false,
  "version" int NOT NULL DEFAULT 1,
  "created_at" timestamp DEFAULT (now()),
  "updated_at" timestamp DEFAULT (now()),
  "created_by" bigint,
  "updated_by" bigint,
  "deleted_by" bigint
);

CREATE TABLE "structural_positions_history" (
  "history_id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "position_id" bigint,
  "organic_unit_id" bigint,
  "position_name" varchar(255) NOT NULL,
  "position_code" varchar(20),
  "description" text,
  "level" int,
  "is_head_position" boolean,
  "active" tinyint NOT NULL,
  "version" int NOT NULL,
  "change_type" varchar(20) NOT NULL,
  "changed_fields" json,
  "old_values" json,
  "new_values" json,
  "created_at" timestamp DEFAULT (now()),
  "created_by" bigint
);

CREATE TABLE "user_structural_positions" (
  "user_position_id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" bigint,
  "position_id" bigint,
  "assignment_date" date NOT NULL,
  "end_date" date,
  "assignment_type" varchar(50),
  "status" smallint DEFAULT 1,
  "is_deleted" boolean NOT NULL DEFAULT false,
  "deleted_at" timestamp,
  "deleted_by" bigint,
  "created_at" timestamp DEFAULT (now()),
  "created_by" bigint
);

CREATE TABLE "personnel_movements" (
  "movement_id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" bigint,
  "from_unit_id" bigint,
  "to_unit_id" bigint,
  "from_position_id" bigint,
  "to_position_id" bigint,
  "movement_type" varchar(50),
  "effective_date" date NOT NULL,
  "reason" text,
  "approved_by" bigint,
  "is_deleted" boolean NOT NULL DEFAULT false,
  "deleted_at" timestamp,
  "deleted_by" bigint,
  "created_at" timestamp DEFAULT (now())
);

CREATE TABLE "modules" (
  "module_id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "system_id" bigint,
  "module_name" varchar(100) NOT NULL,
  "module_path" varchar(255),
  "module_description" text,
  "module_status" smallint DEFAULT 1,
  "is_deleted" boolean NOT NULL DEFAULT false,
  "deleted_at" timestamp,
  "deleted_by" bigint,
  "created_at" timestamp DEFAULT (now()),
  "updated_at" timestamp DEFAULT (now()),
  "created_by" bigint,
  "updated_by" bigint
);

CREATE TABLE "module_permissions" (
  "module_permission_id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "module_id" bigint,
  "permission_id" bigint,
  "detail_description" text,
  "status" smallint DEFAULT 1,
  "is_deleted" boolean NOT NULL DEFAULT false,
  "deleted_at" timestamp,
  "deleted_by" bigint,
  "created_at" timestamp DEFAULT (now()),
  "updated_at" timestamp DEFAULT (now())
);

CREATE TABLE "audit_logs" (
  "log_id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" bigint,
  "action" varchar(100) NOT NULL,
  "affected_table" varchar(50),
  "affected_record_id" bigint,
  "description" text,
  "ip_address" varchar(45),
  "user_agent" text,
  "logged_at" timestamp DEFAULT (now())
);

CREATE TABLE "verification_tokens" (
  "token_id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" bigint,
  "token" varchar(255) NOT NULL,
  "token_type" smallint NOT NULL,
  "created_at" timestamp DEFAULT (now()),
  "expires_at" timestamp NOT NULL,
  "token_status" smallint DEFAULT 1,
  "is_deleted" boolean NOT NULL DEFAULT false,
  "deleted_at" timestamp
);

CREATE TABLE "mfa_devices" (
  "mfa_id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" bigint,
  "mfa_type" smallint NOT NULL,
  "secret_key" varchar(255),
  "mfa_status" smallint DEFAULT 1,
  "registered_at" timestamp DEFAULT (now()),
  "last_validated_at" timestamp,
  "is_deleted" boolean NOT NULL DEFAULT false,
  "deleted_at" timestamp,
  "deleted_by" bigint
);

CREATE TABLE "groups" (
  "group_id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "group_name" varchar(100) NOT NULL,
  "group_description" text,
  "system_id" bigint,
  "is_deleted" boolean NOT NULL DEFAULT false,
  "deleted_at" timestamp,
  "deleted_by" bigint,
  "created_at" timestamp DEFAULT (now()),
  "updated_at" timestamp DEFAULT (now()),
  "created_by" bigint,
  "updated_by" bigint
);

CREATE TABLE "user_groups" (
  "user_group_id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" bigint,
  "group_id" bigint,
  "assigned_at" timestamp DEFAULT (now()),
  "assigned_by" bigint,
  "status" smallint DEFAULT 1,
  "is_deleted" boolean NOT NULL DEFAULT false,
  "deleted_at" timestamp,
  "deleted_by" bigint
);

CREATE TABLE "session_expiration_policies" (
  "policy_id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "system_id" bigint,
  "expiration_minutes" int NOT NULL DEFAULT 480,
  "remember_me" boolean DEFAULT false,
  "is_deleted" boolean NOT NULL DEFAULT false,
  "deleted_at" timestamp,
  "deleted_by" bigint,
  "created_at" timestamp DEFAULT (now()),
  "updated_at" timestamp DEFAULT (now())
);

CREATE TABLE "api_tokens" (
  "api_token_id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" bigint,
  "system_id" bigint,
  "api_token" varchar(255) NOT NULL,
  "scopes" json,
  "created_at" timestamp DEFAULT (now()),
  "expires_at" timestamp,
  "status" smallint DEFAULT 1,
  "is_deleted" boolean NOT NULL DEFAULT false,
  "deleted_at" timestamp,
  "deleted_by" bigint
);

CREATE INDEX ON "organic_units" ("acronym");

CREATE INDEX ON "organic_units" ("parent_id");

CREATE INDEX ON "organic_units" ("level");

CREATE INDEX ON "organic_units" ("active");

CREATE INDEX ON "organic_units" ("is_deleted");

CREATE INDEX ON "organic_units" ("parent_id", "level");

CREATE UNIQUE INDEX ON "organic_units" ("acronym", "is_deleted");

CREATE INDEX ON "organic_units_history" ("unit_id");

CREATE INDEX ON "organic_units_history" ("version");

CREATE INDEX ON "organic_units_history" ("change_type");

CREATE INDEX ON "organic_units_history" ("created_at");

CREATE UNIQUE INDEX ON "users" ("email", "is_deleted");

CREATE INDEX ON "users" ("status");

CREATE INDEX ON "users" ("organic_unit_id");

CREATE INDEX ON "users" ("is_deleted");

CREATE INDEX ON "users" ("created_at");

CREATE INDEX ON "users_history" ("user_id");

CREATE INDEX ON "users_history" ("version");

CREATE INDEX ON "users_history" ("change_type");

CREATE INDEX ON "users_history" ("created_at");

CREATE INDEX ON "password_history" ("user_id");

CREATE INDEX ON "password_history" ("changed_at");

CREATE INDEX ON "password_history" ("is_deleted");

CREATE INDEX ON "active_sessions" ("user_id");

CREATE UNIQUE INDEX ON "active_sessions" ("session_token", "is_deleted");

CREATE INDEX ON "active_sessions" ("expires_at");

CREATE INDEX ON "active_sessions" ("session_status");

CREATE INDEX ON "active_sessions" ("is_deleted");

CREATE INDEX ON "session_history" ("session_id");

CREATE INDEX ON "session_history" ("closed_at");

CREATE INDEX ON "session_history" ("is_deleted");

CREATE UNIQUE INDEX ON "systems" ("system_name", "is_deleted");

CREATE UNIQUE INDEX ON "systems" ("system_code", "is_deleted");

CREATE INDEX ON "systems" ("status");

CREATE INDEX ON "systems" ("is_deleted");

CREATE INDEX ON "systems_history" ("system_id");

CREATE INDEX ON "systems_history" ("version");

CREATE INDEX ON "systems_history" ("created_at");

CREATE UNIQUE INDEX ON "roles" ("system_id", "role_name", "is_deleted");

CREATE INDEX ON "roles" ("system_id");

CREATE INDEX ON "roles" ("role_status");

CREATE INDEX ON "roles" ("is_deleted");

CREATE UNIQUE INDEX ON "permissions" ("system_id", "permission_name", "is_deleted");

CREATE INDEX ON "permissions" ("system_id");

CREATE INDEX ON "permissions" ("permission_category");

CREATE INDEX ON "permissions" ("action_type");

CREATE INDEX ON "permissions" ("permission_status");

CREATE INDEX ON "permissions" ("is_deleted");

CREATE UNIQUE INDEX ON "role_permissions" ("role_id", "permission_id", "is_deleted");

CREATE INDEX ON "role_permissions" ("role_id");

CREATE INDEX ON "role_permissions" ("permission_id");

CREATE INDEX ON "role_permissions" ("is_deleted");

CREATE UNIQUE INDEX ON "user_roles" ("user_id", "role_id", "system_id", "is_deleted");

CREATE INDEX ON "user_roles" ("user_id");

CREATE INDEX ON "user_roles" ("role_id");

CREATE INDEX ON "user_roles" ("system_id");

CREATE INDEX ON "user_roles" ("assignment_status");

CREATE INDEX ON "user_roles" ("is_deleted");

CREATE INDEX ON "structural_positions" ("organic_unit_id");

CREATE UNIQUE INDEX ON "structural_positions" ("organic_unit_id", "position_code", "is_deleted");

CREATE INDEX ON "structural_positions" ("is_head_position");

CREATE INDEX ON "structural_positions" ("active");

CREATE INDEX ON "structural_positions" ("is_deleted");

CREATE INDEX ON "structural_positions_history" ("position_id");

CREATE INDEX ON "structural_positions_history" ("version");

CREATE INDEX ON "structural_positions_history" ("change_type");

CREATE INDEX ON "structural_positions_history" ("created_at");

CREATE INDEX ON "user_structural_positions" ("user_id");

CREATE INDEX ON "user_structural_positions" ("position_id");

CREATE UNIQUE INDEX ON "user_structural_positions" ("user_id", "position_id", "assignment_date", "is_deleted");

CREATE INDEX ON "user_structural_positions" ("assignment_date");

CREATE INDEX ON "user_structural_positions" ("status");

CREATE INDEX ON "user_structural_positions" ("is_deleted");

CREATE INDEX ON "personnel_movements" ("user_id");

CREATE INDEX ON "personnel_movements" ("from_unit_id");

CREATE INDEX ON "personnel_movements" ("to_unit_id");

CREATE INDEX ON "personnel_movements" ("effective_date");

CREATE INDEX ON "personnel_movements" ("movement_type");

CREATE INDEX ON "personnel_movements" ("is_deleted");

CREATE UNIQUE INDEX ON "modules" ("system_id", "module_name", "is_deleted");

CREATE INDEX ON "modules" ("system_id");

CREATE INDEX ON "modules" ("module_status");

CREATE INDEX ON "modules" ("is_deleted");

CREATE UNIQUE INDEX ON "module_permissions" ("module_id", "permission_id", "is_deleted");

CREATE INDEX ON "module_permissions" ("module_id");

CREATE INDEX ON "module_permissions" ("permission_id");

CREATE INDEX ON "module_permissions" ("is_deleted");

CREATE INDEX ON "audit_logs" ("user_id");

CREATE INDEX ON "audit_logs" ("action");

CREATE INDEX ON "audit_logs" ("affected_table");

CREATE INDEX ON "audit_logs" ("logged_at");

CREATE UNIQUE INDEX ON "verification_tokens" ("token", "is_deleted");

CREATE INDEX ON "verification_tokens" ("user_id");

CREATE INDEX ON "verification_tokens" ("token_type");

CREATE INDEX ON "verification_tokens" ("token_status");

CREATE INDEX ON "verification_tokens" ("expires_at");

CREATE INDEX ON "verification_tokens" ("is_deleted");

CREATE INDEX ON "mfa_devices" ("user_id");

CREATE INDEX ON "mfa_devices" ("mfa_type");

CREATE INDEX ON "mfa_devices" ("mfa_status");

CREATE INDEX ON "mfa_devices" ("is_deleted");

CREATE UNIQUE INDEX ON "groups" ("system_id", "group_name", "is_deleted");

CREATE INDEX ON "groups" ("system_id");

CREATE INDEX ON "groups" ("is_deleted");

CREATE UNIQUE INDEX ON "user_groups" ("user_id", "group_id", "is_deleted");

CREATE INDEX ON "user_groups" ("user_id");

CREATE INDEX ON "user_groups" ("group_id");

CREATE INDEX ON "user_groups" ("is_deleted");

CREATE UNIQUE INDEX ON "session_expiration_policies" ("system_id", "is_deleted");

CREATE INDEX ON "session_expiration_policies" ("is_deleted");

CREATE UNIQUE INDEX ON "api_tokens" ("api_token", "is_deleted");

CREATE INDEX ON "api_tokens" ("user_id");

CREATE INDEX ON "api_tokens" ("system_id");

CREATE INDEX ON "api_tokens" ("status");

CREATE INDEX ON "api_tokens" ("is_deleted");

COMMENT ON TABLE "organic_units" IS 'Table to model the organizational hierarchy of an institution.
Allows up to 7 levels of depth through self-reference.
Implements logical deletion and version control for audit compliance.
';

COMMENT ON COLUMN "organic_units"."name" IS 'Full name of the organic unit';

COMMENT ON COLUMN "organic_units"."acronym" IS 'Acronym/initials of the organic unit';

COMMENT ON COLUMN "organic_units"."brand" IS 'URL of the unit image/logo';

COMMENT ON COLUMN "organic_units"."parent_id" IS 'Parent organic unit ID (self-reference)';

COMMENT ON COLUMN "organic_units"."level" IS 'Hierarchical level (1-7)';

COMMENT ON COLUMN "organic_units"."description" IS 'Description of the organic unit';

COMMENT ON COLUMN "organic_units"."active" IS 'Active/inactive status (1/0)';

COMMENT ON COLUMN "organic_units"."sort_order" IS 'Display order within the same level';

COMMENT ON COLUMN "organic_units"."deleted_at" IS 'Logical deletion timestamp';

COMMENT ON COLUMN "organic_units"."is_deleted" IS 'Logical deletion flag';

COMMENT ON COLUMN "organic_units"."version" IS 'Record version for change tracking';

COMMENT ON COLUMN "organic_units"."deleted_by" IS 'User who performed logical deletion';

COMMENT ON TABLE "organic_units_history" IS 'Complete version history of organic units changes.
Stores all modifications for audit trail compliance.
';

COMMENT ON COLUMN "organic_units_history"."change_type" IS 'INSERT, UPDATE, DELETE';

COMMENT ON COLUMN "organic_units_history"."changed_fields" IS 'JSON array of changed field names';

COMMENT ON COLUMN "organic_units_history"."old_values" IS 'JSON object with previous values';

COMMENT ON COLUMN "organic_units_history"."new_values" IS 'JSON object with new values';

COMMENT ON TABLE "users" IS 'Users table with organic unit relationship and full audit trail.
Implements logical deletion to preserve data integrity.
';

COMMENT ON COLUMN "users"."organic_unit_id" IS 'Organic unit where the user belongs';

COMMENT ON COLUMN "users"."status" IS '1=active, 0=inactive, 2=suspended';

COMMENT ON COLUMN "users"."deleted_at" IS 'Logical deletion timestamp';

COMMENT ON COLUMN "users"."is_deleted" IS 'Logical deletion flag';

COMMENT ON COLUMN "users"."version" IS 'Record version for change tracking';

COMMENT ON COLUMN "users"."deleted_by" IS 'User who performed logical deletion';

COMMENT ON TABLE "users_history" IS 'Complete version history of user changes.
Essential for public entity audit requirements.
';

COMMENT ON COLUMN "users_history"."change_type" IS 'INSERT, UPDATE, DELETE';

COMMENT ON COLUMN "users_history"."changed_fields" IS 'JSON array of changed field names';

COMMENT ON COLUMN "users_history"."old_values" IS 'JSON object with previous values';

COMMENT ON COLUMN "users_history"."new_values" IS 'JSON object with new values';

COMMENT ON COLUMN "active_sessions"."session_status" IS '1=active, 0=closed, 2=expired';

COMMENT ON COLUMN "systems"."status" IS '1=active, 0=inactive';

COMMENT ON COLUMN "roles"."role_status" IS '1=active, 0=inactive';

COMMENT ON COLUMN "permissions"."action_type" IS 'create, read, update, delete';

COMMENT ON COLUMN "permissions"."permission_status" IS '1=active, 0=inactive';

COMMENT ON COLUMN "user_roles"."assignment_status" IS '1=active, 0=inactive';

COMMENT ON TABLE "structural_positions" IS 'Defines specific structural positions within each organic unit.
Implements full audit trail for public entity compliance.
';

COMMENT ON COLUMN "structural_positions"."level" IS 'Position level within the unit';

COMMENT ON COLUMN "structural_positions"."is_head_position" IS 'Indicates if this is the head position of the unit';

COMMENT ON TABLE "structural_positions_history" IS 'Complete version history of structural positions changes.
Critical for organizational audit requirements.
';

COMMENT ON COLUMN "user_structural_positions"."end_date" IS 'NULL for active assignments';

COMMENT ON COLUMN "user_structural_positions"."assignment_type" IS 'permanent, temporary, acting, etc.';

COMMENT ON COLUMN "user_structural_positions"."status" IS '1=active, 0=inactive';

COMMENT ON TABLE "personnel_movements" IS 'Tracks personnel movements between organic units and positions.
Essential for maintaining complete organizational audit trail.
';

COMMENT ON COLUMN "personnel_movements"."from_position_id" IS 'Previous structural position';

COMMENT ON COLUMN "personnel_movements"."to_position_id" IS 'New structural position';

COMMENT ON COLUMN "personnel_movements"."movement_type" IS 'transfer, promotion, assignment, etc.';

COMMENT ON COLUMN "modules"."module_status" IS '1=active, 0=inactive';

COMMENT ON COLUMN "module_permissions"."status" IS '1=active, 0=inactive';

COMMENT ON TABLE "audit_logs" IS 'Audit logs are NEVER deleted - permanent record required.
Critical for public entity compliance and legal requirements.
';

COMMENT ON COLUMN "verification_tokens"."token_type" IS '1=email_verification, 2=password_reset';

COMMENT ON COLUMN "verification_tokens"."token_status" IS '1=active, 2=used, 3=expired';

COMMENT ON COLUMN "mfa_devices"."mfa_type" IS '1=SMS, 2=APP, 3=U2F, 4=EMAIL';

COMMENT ON COLUMN "mfa_devices"."mfa_status" IS '1=active, 0=inactive';

COMMENT ON COLUMN "user_groups"."status" IS '1=active, 0=inactive';

COMMENT ON COLUMN "api_tokens"."status" IS '1=active, 0=inactive';

ALTER TABLE "organic_units" ADD FOREIGN KEY ("parent_id") REFERENCES "organic_units" ("unit_id");

ALTER TABLE "organic_units" ADD FOREIGN KEY ("created_by") REFERENCES "users" ("user_id");

ALTER TABLE "organic_units" ADD FOREIGN KEY ("updated_by") REFERENCES "users" ("user_id");

ALTER TABLE "organic_units" ADD FOREIGN KEY ("deleted_by") REFERENCES "users" ("user_id");

ALTER TABLE "organic_units_history" ADD FOREIGN KEY ("unit_id") REFERENCES "organic_units" ("unit_id");

ALTER TABLE "organic_units_history" ADD FOREIGN KEY ("created_by") REFERENCES "users" ("user_id");

ALTER TABLE "users" ADD FOREIGN KEY ("organic_unit_id") REFERENCES "organic_units" ("unit_id");

ALTER TABLE "users" ADD FOREIGN KEY ("deleted_by") REFERENCES "users" ("user_id");

ALTER TABLE "users_history" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("user_id");

ALTER TABLE "users_history" ADD FOREIGN KEY ("created_by") REFERENCES "users" ("user_id");

ALTER TABLE "password_history" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("user_id");

ALTER TABLE "password_history" ADD FOREIGN KEY ("deleted_by") REFERENCES "users" ("user_id");

ALTER TABLE "active_sessions" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("user_id");

ALTER TABLE "session_history" ADD FOREIGN KEY ("session_id") REFERENCES "active_sessions" ("session_id");

ALTER TABLE "session_history" ADD FOREIGN KEY ("deleted_by") REFERENCES "users" ("user_id");

ALTER TABLE "systems" ADD FOREIGN KEY ("created_by") REFERENCES "users" ("user_id");

ALTER TABLE "systems" ADD FOREIGN KEY ("updated_by") REFERENCES "users" ("user_id");

ALTER TABLE "systems" ADD FOREIGN KEY ("deleted_by") REFERENCES "users" ("user_id");

ALTER TABLE "systems_history" ADD FOREIGN KEY ("system_id") REFERENCES "systems" ("system_id");

ALTER TABLE "systems_history" ADD FOREIGN KEY ("created_by") REFERENCES "users" ("user_id");

ALTER TABLE "roles" ADD FOREIGN KEY ("system_id") REFERENCES "systems" ("system_id");

ALTER TABLE "roles" ADD FOREIGN KEY ("created_by") REFERENCES "users" ("user_id");

ALTER TABLE "roles" ADD FOREIGN KEY ("updated_by") REFERENCES "users" ("user_id");

ALTER TABLE "roles" ADD FOREIGN KEY ("deleted_by") REFERENCES "users" ("user_id");

ALTER TABLE "permissions" ADD FOREIGN KEY ("system_id") REFERENCES "systems" ("system_id");

ALTER TABLE "permissions" ADD FOREIGN KEY ("created_by") REFERENCES "users" ("user_id");

ALTER TABLE "permissions" ADD FOREIGN KEY ("updated_by") REFERENCES "users" ("user_id");

ALTER TABLE "permissions" ADD FOREIGN KEY ("deleted_by") REFERENCES "users" ("user_id");

ALTER TABLE "role_permissions" ADD FOREIGN KEY ("role_id") REFERENCES "roles" ("role_id");

ALTER TABLE "role_permissions" ADD FOREIGN KEY ("permission_id") REFERENCES "permissions" ("permission_id");

ALTER TABLE "role_permissions" ADD FOREIGN KEY ("assigned_by") REFERENCES "users" ("user_id");

ALTER TABLE "role_permissions" ADD FOREIGN KEY ("deleted_by") REFERENCES "users" ("user_id");

ALTER TABLE "user_roles" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("user_id");

ALTER TABLE "user_roles" ADD FOREIGN KEY ("role_id") REFERENCES "roles" ("role_id");

ALTER TABLE "user_roles" ADD FOREIGN KEY ("system_id") REFERENCES "systems" ("system_id");

ALTER TABLE "user_roles" ADD FOREIGN KEY ("assigned_by") REFERENCES "users" ("user_id");

ALTER TABLE "user_roles" ADD FOREIGN KEY ("deleted_by") REFERENCES "users" ("user_id");

ALTER TABLE "structural_positions" ADD FOREIGN KEY ("organic_unit_id") REFERENCES "organic_units" ("unit_id");

ALTER TABLE "structural_positions" ADD FOREIGN KEY ("created_by") REFERENCES "users" ("user_id");

ALTER TABLE "structural_positions" ADD FOREIGN KEY ("updated_by") REFERENCES "users" ("user_id");

ALTER TABLE "structural_positions" ADD FOREIGN KEY ("deleted_by") REFERENCES "users" ("user_id");

ALTER TABLE "structural_positions_history" ADD FOREIGN KEY ("position_id") REFERENCES "structural_positions" ("position_id");

ALTER TABLE "structural_positions_history" ADD FOREIGN KEY ("created_by") REFERENCES "users" ("user_id");

ALTER TABLE "user_structural_positions" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("user_id");

ALTER TABLE "user_structural_positions" ADD FOREIGN KEY ("position_id") REFERENCES "structural_positions" ("position_id");

ALTER TABLE "user_structural_positions" ADD FOREIGN KEY ("deleted_by") REFERENCES "users" ("user_id");

ALTER TABLE "user_structural_positions" ADD FOREIGN KEY ("created_by") REFERENCES "users" ("user_id");

ALTER TABLE "personnel_movements" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("user_id");

ALTER TABLE "personnel_movements" ADD FOREIGN KEY ("from_unit_id") REFERENCES "organic_units" ("unit_id");

ALTER TABLE "personnel_movements" ADD FOREIGN KEY ("to_unit_id") REFERENCES "organic_units" ("unit_id");

ALTER TABLE "personnel_movements" ADD FOREIGN KEY ("from_position_id") REFERENCES "structural_positions" ("position_id");

ALTER TABLE "personnel_movements" ADD FOREIGN KEY ("to_position_id") REFERENCES "structural_positions" ("position_id");

ALTER TABLE "personnel_movements" ADD FOREIGN KEY ("approved_by") REFERENCES "users" ("user_id");

ALTER TABLE "personnel_movements" ADD FOREIGN KEY ("deleted_by") REFERENCES "users" ("user_id");

ALTER TABLE "modules" ADD FOREIGN KEY ("system_id") REFERENCES "systems" ("system_id");

ALTER TABLE "modules" ADD FOREIGN KEY ("deleted_by") REFERENCES "users" ("user_id");

ALTER TABLE "modules" ADD FOREIGN KEY ("created_by") REFERENCES "users" ("user_id");

ALTER TABLE "modules" ADD FOREIGN KEY ("updated_by") REFERENCES "users" ("user_id");

ALTER TABLE "module_permissions" ADD FOREIGN KEY ("module_id") REFERENCES "modules" ("module_id");

ALTER TABLE "module_permissions" ADD FOREIGN KEY ("permission_id") REFERENCES "permissions" ("permission_id");

ALTER TABLE "module_permissions" ADD FOREIGN KEY ("deleted_by") REFERENCES "users" ("user_id");

ALTER TABLE "audit_logs" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("user_id");

ALTER TABLE "verification_tokens" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("user_id");

ALTER TABLE "mfa_devices" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("user_id");

ALTER TABLE "mfa_devices" ADD FOREIGN KEY ("deleted_by") REFERENCES "users" ("user_id");

ALTER TABLE "groups" ADD FOREIGN KEY ("system_id") REFERENCES "systems" ("system_id");

ALTER TABLE "groups" ADD FOREIGN KEY ("deleted_by") REFERENCES "users" ("user_id");

ALTER TABLE "groups" ADD FOREIGN KEY ("created_by") REFERENCES "users" ("user_id");

ALTER TABLE "groups" ADD FOREIGN KEY ("updated_by") REFERENCES "users" ("user_id");

ALTER TABLE "user_groups" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("user_id");

ALTER TABLE "user_groups" ADD FOREIGN KEY ("group_id") REFERENCES "groups" ("group_id");

ALTER TABLE "user_groups" ADD FOREIGN KEY ("assigned_by") REFERENCES "users" ("user_id");

ALTER TABLE "user_groups" ADD FOREIGN KEY ("deleted_by") REFERENCES "users" ("user_id");

ALTER TABLE "session_expiration_policies" ADD FOREIGN KEY ("system_id") REFERENCES "systems" ("system_id");

ALTER TABLE "session_expiration_policies" ADD FOREIGN KEY ("deleted_by") REFERENCES "users" ("user_id");

ALTER TABLE "api_tokens" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("user_id");

ALTER TABLE "api_tokens" ADD FOREIGN KEY ("system_id") REFERENCES "systems" ("system_id");

ALTER TABLE "api_tokens" ADD FOREIGN KEY ("deleted_by") REFERENCES "users" ("user_id");

ALTER TABLE "users" ADD FOREIGN KEY ("created_by") REFERENCES "users" ("user_id");

ALTER TABLE "users" ADD FOREIGN KEY ("updated_by") REFERENCES "users" ("user_id");
