package models

import (
	"time"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

// Información de geolocalización
type LocationDetail struct {
	Country      string      `bson:"country,omitempty"`
	CountryCode  string      `bson:"country_code,omitempty"`
	Region       string      `bson:"region,omitempty"`
	City         string      `bson:"city,omitempty"`
	Coordinates  Coordinates `bson:"coordinates,omitempty"`
	ISP          string      `bson:"isp,omitempty"`
	Organization string      `bson:"organization,omitempty"`
}

// Información extendida del dispositivo
type SessionDeviceInfo struct {
	UserAgent      string          `bson:"user_agent,omitempty"`
	IP             string          `bson:"ip,omitempty"`
	DeviceID       string          `bson:"device_id,omitempty"`
	BrowserName    string          `bson:"browser_name,omitempty"`
	BrowserVersion string          `bson:"browser_version,omitempty"`
	OS             string          `bson:"os,omitempty"`
	OSVersion      string          `bson:"os_version,omitempty"`
	DeviceType     string          `bson:"device_type,omitempty"` // desktop, mobile, tablet
	Timezone       string          `bson:"timezone,omitempty"`
	Language       string          `bson:"language,omitempty"`
	Location       *LocationDetail `bson:"location,omitempty"`
}

// Métricas de la sesión
type SessionMetrics struct {
	TotalRequests        int    `bson:"total_requests"`
	TotalTokenRefreshes  int    `bson:"total_token_refreshes"`
	ApplicationsAccessed int    `bson:"applications_accessed"`
	LastApplicationUsed  string `bson:"last_application_used,omitempty"`
	SessionDuration      int64  `bson:"session_duration"` // en segundos
}

// Modelo de sesión
type Session struct {
	ID           primitive.ObjectID `bson:"_id,omitempty"`
	SessionID    string             `bson:"session_id"`
	UserID       primitive.ObjectID `bson:"user_id"`
	IsActive     bool               `bson:"is_active"`
	CreatedAt    time.Time          `bson:"created_at"`
	LastActivity time.Time          `bson:"last_activity"`
	ExpiresAt    time.Time          `bson:"expires_at"`

	DeviceInfo SessionDeviceInfo `bson:"device_info,omitempty"`
	Metrics    SessionMetrics    `bson:"metrics,omitempty"`
}

// The `CaptchaLog` struct represents a log entry for a captcha validation attempt, including details
// such as token, success status, challenge timestamp, hostname, action, custom data, error codes,
// remote IP, and creation timestamp.
// @property ID - The `ID` field in the `CaptchaLog` struct is of type `primitive.ObjectID` and is used
// to uniquely identify each captcha log entry in the database. It is typically generated by the
// database system when a new entry is created.
// @property {string} Token - The `Token` field in the `CaptchaLog` struct represents the token
// received from the client for captcha verification.
// @property {bool} Success - The `Success` field in the `CaptchaLog` struct is used to indicate
// whether the validation with Cloudflare was successful or not. It is a boolean field that will be
// true if the validation was successful and false if it was not.
// @property ChallengeTS - The `ChallengeTS` field in the `CaptchaLog` struct represents the time when
// the captcha challenge occurred. It stores the timestamp of when the captcha challenge was initiated
// or completed. This field is used to track the timing of the captcha verification process.
// @property {string} Hostname - The `Hostname` property in the `CaptchaLog` struct represents the
// domain from which the captcha was executed. It stores the domain name or host name of the website
// where the captcha challenge was presented to the user.
// @property {string} Action - The `Action` property in the `CaptchaLog` struct is used to define the
// action associated with the captcha (if you are using v3 version of the captcha). This field is
// optional and can be used to specify the specific action or event that triggered the captcha
// challenge. It provides additional context
// @property {string} CustomData - The `CustomData` field in the `CaptchaLog` struct is an optional
// field where you can store additional custom data related to the captcha log entry. This field allows
// you to include any extra information that you may want to associate with the captcha log, such as
// user-specific details, context about
// @property {[]string} ErrorCodes - The `ErrorCodes` property in the `CaptchaLog` struct is used to
// store any error codes that may have occurred during the captcha validation process. This field is of
// type `[]string`, which means it is a slice of strings that can hold multiple error codes if needed.
// When a captcha
// @property {string} RemoteIP - The `RemoteIP` property in the `CaptchaLog` struct represents the IP
// address of the user who attempted the captcha. This field stores the IP address from which the
// captcha request originated.
// @property CreatedAt - The `CreatedAt` field in the `CaptchaLog` struct represents the timestamp when
// the captcha log entry was created or recorded. It stores the time when the captcha validation
// attempt occurred.
type CaptchaLog struct {
	ID            primitive.ObjectID  `bson:"_id,omitempty"`
	UserID        primitive.ObjectID  `bson:"user_id,omitempty"`     // Usuario que resolvió el captcha
	SessionID     *primitive.ObjectID `bson:"session_id,omitempty"`  // Si existe una sesión activa
	AuthLogID     *primitive.ObjectID `bson:"auth_log_id,omitempty"` // Log asociado a la validación
	ApplicationID string              `bson:"application_id,omitempty"`
	Token         string              `bson:"token"`                 // token recibido del cliente
	Success       bool                `bson:"success"`               // validación con Cloudflare
	ChallengeTS   time.Time           `bson:"challenge_ts"`          // hora del desafío
	Hostname      string              `bson:"hostname"`              // dominio que ejecutó el captcha
	Action        string              `bson:"action,omitempty"`      // acción definida en el captcha (si usaste v3)
	CustomData    string              `bson:"cdata,omitempty"`       // opcional
	ErrorCodes    []string            `bson:"error_codes,omitempty"` // errores si falló
	RemoteIP      string              `bson:"remote_ip"`             // IP del usuario
	CreatedAt     time.Time           `bson:"created_at"`            // registro del intento
}
