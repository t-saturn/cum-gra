services:
  # Servicio principal: auth-service-server
  auth-service-server:
    container_name: auth-service-server
    build:
      context: .
      dockerfile: Dockerfile
    # Cargamos todas las variables desde el archivo .env
    env_file:
      - .env
    environment:
      # Override SOLO cuando se necesita ajustar para Docker (no para local dev).
      # Ejemplo: "localhost" no sirve dentro de contenedores, usamos el nombre del servicio.
      DB_HOST: postgres
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_SSLMODE: ${DB_SSLMODE}

      # Mongo dentro de la red de Docker (en lugar de localhost)
      MONGO_URI: mongodb://admin:password@mongo:27017/?authSource=admin
      MONGO_DB_NAME: ${MONGO_DB_NAME}

      # Puerto interno del servidor
      SERVER_PORT: ${SERVER_PORT}

      # Montamos las llaves JWT como archivo dentro del contenedor
      JWT_PRIVATE_KEY_PATH: /app/keys/jwtRS256.key
      JWT_PUBLIC_KEY_PATH: /app/keys/jwtRS256.key.pub

    ports:
      - "9190:9190" # expone el puerto de la API hacia el host

    volumes:
      # Montamos las llaves en modo solo lectura (para no sobrescribir desde dentro del contenedor)
      - ./keys:/app/keys:ro

    depends_on:
      # Garantizamos que Postgres y Mongo estén listos antes de iniciar
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy

    restart: unless-stopped
    networks:
      - backend

  # PostgreSQL (base de datos relacional principal)
  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432" # expone Postgres al host (útil para conectarse desde pgAdmin o cliente local)
    volumes:
      - postgres_data:/var/lib/postgresql/data # persistencia de datos
    healthcheck:
      # Verificamos si Postgres está listo antes de levantar el servicio principal
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DB_USER} -d ${DB_NAME} -h postgres -p ${DB_PORT}",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    networks:
      - backend

  # MongoDB (base de datos documental para autenticación / sesiones / logs)
  mongo:
    image: mongo:7
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME}
    ports:
      - "27017:27017" # expone Mongo al host (para conectarse con Compass o cliente Mongo)
    volumes:
      - mongo_data:/data/db # persistencia de datos
    healthcheck:
      # Verificamos que el servidor Mongo responda a un ping
      test:
        [
          "CMD",
          "mongosh",
          "--username",
          "admin",
          "--password",
          "password",
          "--eval",
          "db.adminCommand('ping')",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    networks:
      - backend

# Volúmenes persistentes
volumes:
  postgres_data:
  mongo_data:

# Red interna para comunicación entre servicios
networks:
  backend:
    driver: bridge
