syntax = "proto3";

// package module.v1;
package module;

// option go_package = "github.com/t-saturn/central-user-manager/server/proto/module/v1;modulev1";
option go_package = "server/pb/module;modulepb";

import "google/protobuf/timestamp.proto";

// Enums
enum ModuleStatus {
  MODULE_STATUS_UNSPECIFIED = 0;
  MODULE_STATUS_ACTIVE = 1;
  MODULE_STATUS_INACTIVE = 2;
}

// Messages
message Module {
  string id = 1;
  string item = 2;
  string name = 3;
  string label = 4;
  string route = 5;
  string icon = 6;
  string parent_id = 7;
  string application_id = 8;
  int32 sort_order = 9;
  bool is_menu_item = 10;
  ModuleStatus status = 11;
  google.protobuf.Timestamp created_at = 12;
  google.protobuf.Timestamp updated_at = 13;
  bool is_deleted = 14;
  google.protobuf.Timestamp deleted_at = 15;
  string deleted_by = 16;
}

message ModuleWithChildren {
  Module module = 1;
  repeated ModuleWithChildren children = 2;
}

message CreateModuleRequest {
  string item = 1;
  string name = 2;
  string label = 3;
  string route = 4;
  string icon = 5;
  string parent_id = 6;
  string application_id = 7;
  int32 sort_order = 8;
  bool is_menu_item = 9;
}

message CreateModuleResponse {
  Module module = 1;
}

message GetModuleRequest {
  string id = 1;
}

message GetModuleResponse {
  Module module = 1;
}

message UpdateModuleRequest {
  string id = 1;
  string item = 2;
  string name = 3;
  string label = 4;
  string route = 5;
  string icon = 6;
  string parent_id = 7;
  int32 sort_order = 8;
  bool is_menu_item = 9;
  ModuleStatus status = 10;
}

message UpdateModuleResponse {
  Module module = 1;
}

message DeleteModuleRequest {
  string id = 1;
  string deleted_by = 2;
}

message DeleteModuleResponse {
  bool success = 1;
}

message ListModulesRequest {
  string application_id = 1;
  string parent_id = 2;
  bool menu_items_only = 3;
  ModuleStatus status = 4;
  int32 page = 5;
  int32 page_size = 6;
}

message ListModulesResponse {
  repeated Module modules = 1;
  int32 total = 2;
  int32 page = 3;
  int32 page_size = 4;
}

message GetModuleTreeRequest {
  string application_id = 1;
  bool menu_items_only = 2;
  ModuleStatus status = 3;
}

message GetModuleTreeResponse {
  repeated ModuleWithChildren modules = 1;
}

message GetModulesByApplicationRequest {
  string application_id = 1;
  bool include_inactive = 2;
}

message GetModulesByApplicationResponse {
  repeated Module modules = 1;
}

message ReorderModulesRequest {
  message ModuleOrder {
    string id = 1;
    int32 sort_order = 2;
  }
  repeated ModuleOrder modules = 1;
}

message ReorderModulesResponse {
  bool success = 1;
}

message GetUserAccessibleModulesRequest {
  string user_id = 1;
  string application_id = 2;
  bool menu_items_only = 3;
}

message GetUserAccessibleModulesResponse {
  repeated ModuleWithChildren modules = 1;
}

// Service
service ModuleService {
  rpc CreateModule(CreateModuleRequest) returns (CreateModuleResponse);
  rpc GetModule(GetModuleRequest) returns (GetModuleResponse);
  rpc UpdateModule(UpdateModuleRequest) returns (UpdateModuleResponse);
  rpc DeleteModule(DeleteModuleRequest) returns (DeleteModuleResponse);
  rpc ListModules(ListModulesRequest) returns (ListModulesResponse);
  rpc GetModuleTree(GetModuleTreeRequest) returns (GetModuleTreeResponse);
  rpc GetModulesByApplication(GetModulesByApplicationRequest) returns (GetModulesByApplicationResponse);
  rpc ReorderModules(ReorderModulesRequest) returns (ReorderModulesResponse);
  rpc GetUserAccessibleModules(GetUserAccessibleModulesRequest) returns (GetUserAccessibleModulesResponse);
}
